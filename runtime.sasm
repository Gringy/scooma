/ runtime for scooma version 0.0.9
/ created 23.05.2019
/ Gringy egor@kanev.xyz

/ header structure:
/ 00 link to previous header or 0x00 if last
/ 01 word class
/ 02 link for jump
/ 03 and next - name as null-terminated string 

/ jump to entry point
i lit jump
r start

/ ===============================
/ === variables and constants ===
/ ===============================
CONST BUFF_START 4096

/ vars
: Here
r image_end
: Dict
r word_last
: Buff
r BUFF_START
: Comp
n 0

/ ===================
/ === entry point ===
/ ===================
: start
i lit call
r interpret
i lit jump
r start
i bye

/ ====================
/ === common words ===
/ ====================

/ s:get
/ -- <link to line>
: s:get
/ at first drop the buffer
i lit call
r buff:drop
/ then read head spaces and drop it
: s:get--drop-spaces
i get dup lit call
r space?
i not lit cjump
r s:get--start-reading
i drop lit jump
r s:get--drop-spaces
: s:get--start-reading
/ then read word chars to buffer
i lit call
r buff:add
i get dup lit call
r space?
i not lit cjump
r s:get--start-reading
/ then add link to buffer
i drop lit call
r buff:get
i ret

/ space?
/ c -- f
/ 32 - space, 9 - \t, 10 - \n, 13 - \r
: space?
i dup lit eq swap
n 32
i dup lit eq swap
n 9
i dup lit eq swap
n 10
i lit eq
n 13
i or or or ret

/ nl
: nl
i lit emit ret
n 10

/ inc
: inc
i lit add ret
n 1

/ dec
: dec
i lit sub ret
n 1

/ s:put
/ s -- 
/ puts a string to console
: s:put
i dup fetch dup lit
n 0
i eq lit cjump
r s:put:ret
i emit lit add
n 1 
i lit jump
r s:put
: s:put:ret
i drop drop ret

/ buff:add
: buff:add
i lit fetch dup push
r Buff
i store pop lit add
n 1
i dup lit store lit
r Buff
n 0
i swap store ret

/ buff:size
: buff:size
i lit fetch lit
r Buff
r BUFF_START
i sub ret

/ buff:get
: buff:get
i lit ret
r BUFF_START

/ buff:drop
: buff:drop
i lit lit store ret
r BUFF_START
r Buff

/ fetch>
/ <pointer> -- <pointer+1> <cell>
: fetch>
i dup lit add swap
n 1
i fetch ret

/ s:eq?
/ <str2> <str1> -- <eq?>
: s:eq?
i lit call
r fetch>
/ stack here: <str2> <str1+1> <ch1>
i rot lit call
r fetch>
/ stack here: <str1+1> <ch1> <str2+1> <ch2>
i rot
/ stack here: <str1+1> <str2+1> <ch2> <ch1>
i over over eq
/ stack here: <str1+1> <str2+1> <ch2> <ch1> <eq?>
i lit cjump
r s:eq?--char-eq
/ char is not equal: drop all and exit
i drop drop drop drop
i lit ret
n 0
: s:eq?--char-eq
/ stack here: <str1+1> <str2+1> <ch2> <ch1>
i drop lit eq
n 0
/ stack here: <str1+1> <str2+1> <is-zero?>
/ if not end of line - go to start of word
i not lit cjump
r s:eq?
/ else return true
i drop drop lit ret
n -1
i ret

/ dict:next
: dict:next
i fetch ret

/ dict:class
: dict:class
i lit add fetch ret
n 1

/ dict:xt
: dict:xt
i lit add fetch ret
n 2

/ dict:name
/ <header> -- <name>
: dict:name
i lit add ret
n 3

/ dict:for-each
/ <quote> --
: dict:for-each
i dup push lit fetch
r Dict
: dict:for-each--loop
i dup
i lit eq lit cjump
n 0
r dict:for-each--drop
i dup
i pop dup push call
i fetch lit jump
r dict:for-each--loop
: dict:for-each--drop
i drop drop pop drop
i ret

/ dict:words
/ --
: dict:words
i lit lit call
r dict:words--quote
r dict:for-each
i lit call
r nl
i ret
: dict:words--quote
i lit call
r dict:name
i lit call
r s:put
i lit emit ret
n 32

/ dict:find
/ <name> -- <header address>
: dict:find
i push lit fetch
r Dict
: dict:find--loop
/ header
i dup lit eq
n 0
/ header <is-last-word?>
i lit cjump
r dict:find--success
i dup lit call
r dict:name
/ header header-name
i pop dup push
/ header header-name <name>
i lit call
r s:eq?
/ header <eq?>
i lit cjump
r dict:find--success
/ not equal, go to next header
i fetch lit jump
r dict:find--loop
: dict:find--success
i pop drop ret

/ s:to-int
/ <string> -- <result-int> <flag-if-done>
: s:to-int
i dup fetch lit eq
/ 45 is '-'
n 45
i not lit cjump
r s:to-int--positive
/ negative
i lit push
n -1
/ skip dash in the start of string
i lit add
n 1
i lit jump
r s:to-int--start-loop
: s:to-int--positive
i lit push
n 1
: s:to-int--start-loop
i lit swap
n 0
/ <number> <str>
: s:to-int--loop
i lit call
r fetch>
/ <number> <str+1> <char>
i dup lit eq
n 0
i lit cjump
r s:to-int--success
i dup lit call
r number?
/ <number> <str+1> <char> <is-valid?> 
i not lit cjump
r s:to-int--invalid
i lit sub
/ 48 is '0'
n 48
i rot lit mul add
n 10
/ <str+1> <number*10+char>
i swap lit jump
r s:to-int--loop
: s:to-int--success
i drop drop
i pop mul lit ret
n -1
: s:to-int--invalid
i pop drop
i drop drop lit ret
n 0

/ number?
/ <char> -- <flag-if-number>
: number?
i dup lit beq
/ 48 is '0'
n 48
i swap lit leq
/ 57 is '9'
n 57
i and ret

/ class:macro
/ <xt> --
: class:macro
i call
i ret

/ class:word
/ <xt> --
: class:word
i lit fetch
r Comp
i lit cjump
r class:word--compile
i call
i ret
: class:word--compile
i lit lit call
i lit call
r compile:cell
i lit call
r compile:cell
i ret

/ class:primitive
/ <xt> --
: class:primitive
i lit fetch
r Comp
i lit cjump
r class:primitive--compile
i call
i ret
: class:primitive--compile
i fetch lit call
r compile:cell
i ret

/ class:primitive-only
/ <xt> --
: class:primitive-only
i lit fetch
r Comp
i not lit ccall
r class:primitive-only--error
i fetch lit call
r compile:cell
i ret
: class:primitive-only--error
i drop lit lit call
r class:primitive-only--error-string
r s:put
i ret

: class:primitive-only--error-string
s this word can be only compiled, not interpreted\n

: interpret--prefix-string
s prefix:
n 0

/ interpret
/ --
: interpret
i lit call
r s:get
/ <name>
i dup fetch
/ <name> <first-char>
i lit lit add store
r interpret--prefix-string
n 7
i lit lit call
r interpret--prefix-string
r dict:find
/ <name> <prefix-header>
i dup lit cjump
r interpret--prefix
i drop

i dup lit call
r dict:find
/ <str> <header>
i dup lit eq
n 0
i lit cjump
r interpret--not-found
i swap drop
/ <header>
i dup lit call
r dict:xt
i swap lit call
r dict:class
i call
i ret

/ <name> <prefix-header>
: interpret--prefix
i swap lit add swap
n 1
i lit call
r dict:xt
i call
i ret

: interpret--not-found
i drop drop
i lit lit call
r str-not-found
r s:put
i ret

: str-not-found
s word not found\n

/ prefix:#
/ <string> -- <number>
: prefix:#
i lit call
r s:to-int
/ <number> <flag>
i not lit cjump
r prefix:#--error
/ <number>
i lit fetch
r Comp
/ <number> <Comp>
i lit cjump
r prefix:#--compile
/ leave int in stack
i ret

: prefix:#--compile
i lit lit call
i lit
r compile:cell
i lit call
r compile:cell
i ret

: prefix:#--error
i lit lit call
r prefix:#--error-string
r s:put
i drop
i ret

: prefix:#--error-string
s bad number\n

/ prefix::
/ <string> --
: prefix::
i lit lit lit call
n 0
r class:word
r compile:new-word
i lit lit store ret
n -1
r Comp

/ ;
/ --
: ;
i lit lit call
i ret
r compile:cell
i lit lit store ret
n 0
r Comp

: compile:cell
/ <n> -- 
i lit call
r here
i store
i lit fetch lit add
r Here
n 1
i lit store ret
r Here

: compile:string
/ <string> --
i lit call
r fetch>
/ <string> <char>
i dup lit call
r compile:cell
/ <string> <char>
i lit eq lit cjump
n 0
r compile:string--end
i lit jump
r compile:string
: compile:string--end
i drop ret

: compile:header
/ <name-string> <xt> <class> -- <&xt>
i lit call
r here
i push
i lit fetch
r Dict
/ compile prev header link
i lit call
r compile:cell
/ new last header
i pop dup push
i lit store
r Dict
/ compile class
i lit call
r compile:cell
/ compile xt
i lit call
r compile:cell
/ compile name
i lit call
r compile:string
i pop 
i lit add ret
n 2

: compile:new-word
/ <name-string> <xt> <class> --
i lit call
r compile:header
i lit call
r here
i swap store ret

/ REMOVE IT!
: dump-last
i lit lit call
r image_end
r dump
i ret

: dump
/ <address> --
i lit
n 20
i swap
/ i a
: dump--loop
i lit call
r fetch>
i dot lit emit
n 32
/ i a
i swap lit sub dup
n 1
/ a i i
i lit eq
n 0
i lit cjump
r dump--ret
i swap lit jump
r dump--loop
: dump--ret
i drop drop ret

: here
/ -- <here>
i lit fetch ret
r Here

/ ====================
/ === native words ===
/ ====================
: pr-nop
i nop
i ret

: pr-lit
i lit
i bye

: pr-add
i add
i ret

: pr-sub
i sub
i ret

: pr-mul
i mul
i ret

: pr-div
i div
i ret

: pr-mod
i mod
i ret

: pr-not
i not
i ret

: pr-and
i and
i ret

: pr-or
i or
i ret

: pr-xor
i xor
i ret

: pr-eq
i eq
i ret

: pr-neq
i neq
i ret

: pr-lt
i lt
i ret

: pr-bt
i bt
i ret

: pr-leq
i leq
i ret

: pr-beq
i beq
i ret

: pr-drop
i drop
i ret

: pr-dup
i dup
i ret

: pr-nip
i nip
i ret

: pr-swap
i swap
i ret

: pr-over
i over
i ret

: pr-rot
i rot
i ret

: pr-mrot
i mrot
i ret

: pr-push
i push
i ret

: pr-pop
i pop
i ret

: pr-fetch
i fetch
i ret

: pr-store
i store
i ret

: pr-jump
i jump
i ret

: pr-cjump
i cjump
i ret

: pr-call
i call
i ret

: pr-ccall
i ccall
i ret

: pr-ret
i ret
i ret

: pr-dot
i dot
i ret

: pr-emit
i emit
i ret

: pr-get
i get
i ret

: pr-debug
i debug
i ret

: pr-bye
i bye
i ret

: n:put
i dot ret

/ ========================
/ === dict starts here ===
/ ========================
HEADER class:primitive      pr-nop   nop
HEADER class:primitive-only pr-lit   lit
HEADER class:primitive      pr-add   +
HEADER class:primitive      pr-sub   -
HEADER class:primitive      pr-mul   *
HEADER class:primitive      pr-div   /
HEADER class:primitive      pr-mod   %
HEADER class:primitive      pr-not   not
HEADER class:primitive      pr-and   and
HEADER class:primitive      pr-or    or
HEADER class:primitive      pr-xor   xor
HEADER class:primitive      pr-eq    ==
HEADER class:primitive      pr-neq   !=
HEADER class:primitive      pr-lt    <
HEADER class:primitive      pr-bt    >
HEADER class:primitive      pr-leq   <=
HEADER class:primitive      pr-beq   >=
HEADER class:primitive      pr-drop  drop
HEADER class:primitive      pr-dup   dup
HEADER class:primitive      pr-nip   nip
HEADER class:primitive      pr-swap  swap
HEADER class:primitive      pr-over  over
HEADER class:primitive      pr-rot   rot
HEADER class:primitive      pr-mrot  mrot
HEADER class:primitive-only pr-push  push
HEADER class:primitive-only pr-pop   pop
HEADER class:primitive      pr-fetch fetch
HEADER class:primitive      pr-store store
HEADER class:primitive-only pr-jump  jump
HEADER class:primitive-only pr-cjump cjump
HEADER class:primitive-only pr-call  call
HEADER class:primitive-only pr-ccall ccall
HEADER class:primitive-only pr-ret   ret
HEADER class:primitive      pr-dot   dot
HEADER class:primitive      pr-emit  emit
HEADER class:primitive      pr-get   get
HEADER class:primitive      pr-debug debug
HEADER class:primitive      pr-bye   bye

/ high-level word headers
HEADER class:word    dump             dump
HEADER class:word    inc              inc
HEADER class:word    dec              dec
HEADER class:word    s:put            s:put
HEADER class:word    space?           space?
HEADER class:word    number?          number?
HEADER class:word    s:get            s:get
HEADER class:word    s:eq?            s:eq?
HEADER class:word    s:to-int         s:to-int
HEADER class:word    dict:class       dict:class
HEADER class:word    dict:xt          dict:xt
HEADER class:word    dict:name        dict:name
HEADER class:word    dict:for-each    dict:for-each
HEADER class:word    dict:words       dict:words
HEADER class:word    dict:find        dict:find
HEADER class:word    compile:string   compile:string
HEADER class:word    compile:cell     compile:cell
HEADER class:word    compile:header   compile:header
HEADER class:word    compile:new-word compile:new-word
HEADER class:word    here             here
HEADER class:word    prefix:#         prefix:#
HEADER class:word    prefix::         prefix::
HEADER class:macro   ;                ;
HEADER class:word    nl               nl
HEADER class:word    fetch>           fetch>
HEADER class:word    n:put            n:put

: image_end
